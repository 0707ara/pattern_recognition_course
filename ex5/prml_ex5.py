# -*- coding: utf-8 -*-
"""PRML_ex5

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ExPKHxeYVosehG7Pqol2rzwGPX2HMFCu
"""

## Mounting Google drive at colab
from google.colab import drive
drive.mount('/content/drive')

## Path where 
path1='/content/drive/MyDrive/Colab Notebooks/GTSRB_subset_2/class1'
path2='/content/drive/MyDrive/Colab Notebooks/GTSRB_subset_2/class2'

import glob
import cv2
# glob returns the path of each image file.
files1 = glob.glob("/content/drive/MyDrive/Colab Notebooks/GTSRB_subset_2/class1/*.jpg")
files1 = sorted(files1)


files2 = glob.glob("/content/drive/MyDrive/Colab Notebooks/GTSRB_subset_2/class2/*.jpg")
files2 = sorted(files2)

# Image will be stored at cv_img
# Image has been transformed to greyscale. 
class1 = []
class2 = []

for img in files1:
    n= cv2.imread(img)
    #class1.append(n)
    class1.append(cv2.cvtColor(n, cv2.COLOR_BGR2GRAY))

for img in files2:
    n= cv2.imread(img)
    #class2.append(n)
    class2.append(cv2.cvtColor(n, cv2.COLOR_BGR2GRAY))

print(len(y1))
print(len(y2))

import sklearn
from sklearn.model_selection import train_test_split

y1 = np.zeros(len(class1), dtype= np.int8)
y2 = np.ones(len(class2), dtype= np.int8)
y3 = np.concatenate([y1, y2])
x3 = np.concatenate([class1, class2])

train_len = int(len(x3) * 0.8)
train_x, test_x, train_y, test_y  = train_test_split(x3, y3, train_size=train_len, shuffle=True, stratify=y3)

print(len(x3), len(x3))

print(len(train_x), len(train_y),len(test_x), len(test_y))

import tensorflow as tf
import numpy as np
from tensorflow import keras
from tensorflow.keras import layers
import keras.optimizers
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
import matplotlib.pyplot as plt


model = Sequential()
model.add(keras.Input(shape=(64, 64)))
model.add(layers.Flatten())
model.add(Dense(100, activation='sigmoid'))
#model.add(layers.Conv2D(32, 5, strides=3, activation="relu"))
model.add(layers.Flatten())
model.add(Dense(10, activation='sigmoid'))
model.add(Dense(1, activation='sigmoid'))
model.summary()

opt = tf.keras.optimizers.SGD(learning_rate=0.05)
model.compile(optimizer=opt, loss=tf.keras.losses.BinaryCrossentropy(), metrics=['mse','accuracy'])
num_of_epochs = 10

tr_hist = model.fit(train_x, train_y, epochs=num_of_epochs, verbose=1)

plt.plot(tr_hist.history['accuracy'])
plt.ylabel('accuracy')
plt.xlabel('epoch')
#plt.legend(['opetus'], loc='upper right')
plt.show()

prediction = model.predict(test_x)
model.evaluate(test_x, y = test_y,verbose=1)

plt.plot(tr_hist.history['loss'])
plt.ylabel('loss')
plt.xlabel('epoch')
#plt.legend(['opetus'], loc='upper right')
plt.show()

plt.plot(tr_hist.history['accuracy'])
plt.ylabel('accuracy')
plt.xlabel('epoch')
#plt.legend(['opetus'], loc='upper right')
plt.show()